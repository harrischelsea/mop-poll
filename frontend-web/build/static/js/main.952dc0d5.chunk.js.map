{"version":3,"sources":["actions/UserActions.js","reducers/UserReducer.js","actions/LoginActions.js","reducers/LoginReducer.js","reducers/RegisterReducer.js","reducers/PollReducer.js","reducers/QuestionReducer.js","reducers/AnswerReducer.js","reducers/CreatePollReducer.js","reducers/index.js","actions/ActionTypes.js","actions/RegisterActions.js","pages/login/Login.js","pages/loginAdmin/LoginAdmin.js","pages/register/Register.js","services/Services.js","actions/PollActions.js","components/pollList/PollList.js","components/menu/Menu.js","pages/home/Home.js","actions/QuestionActions.js","actions/AnswerActions.js","components/questionTypes/QuestionTypeRadio.js","components/questionTypes/QuestionTypeText.js","components/questionTypes/QuestionTypeItem.js","components/questionTypes/QuestionTypeCheckbox.js","components/questionList/QuestionList.js","pages/poll/Poll.js","pages/success/Success.js","router/MainRouter.js","router/UserRouter.js","components/modalUpdateQuestion/ModalUpdateQuestion.js","components/updateQuestionList/UpdateQuestionList.js","components/modalCreateQuestion/ModalCreateQuestion.js","pages/updatePoll/UpdatePoll.js","pages/main/Main.js","components/createdQuestionsList/CreatedQuestionsList.js","pages/createPoll/CreatePoll.js","actions/CreatePollActions.js","router/AdminRouter.js","router/CmsRouter.js","router/LoginRouter.js","router/Router.js","App.js","serviceWorker.js","index.js"],"names":["setUser","user","type","payload","INITIAL_STATE","username","id","token","usernameChanged","passwordChanged","password","loginUserFail","dispatch","error","loginUserSuccess","getUser","axios","get","then","res","defaults","headers","common","localStorage","getItem","data","setItem","catch","err","console","log","getUserAdmin","role","loading","successLogin","getUserLoading","confirmPassword","email","successRegister","polls","questions","changeQuestion","updatedQuestion","findIndex","el","questionId","Object","objectSpread","text","questionText","answers","success","handleAnswers","newAnswer","find","option_id","index","splice","checkType","type_id","question_id","push","createdQuestions","combineReducers","state","arguments","length","undefined","action","login","question","deleteQuestion","filter","concat","toConsumableArray","name","tip","selectedType","opcije","options","answer","createPoll","deleteIndex","i","register","Login","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleUsernameChanged","e","target","value","handlePasswordChanged","handleLogin","_this$props$login","loginUser","signOutUser","_React$createElement","react_default","a","createElement","className","Container","Grid","centered","Column","mobile","tablet","computer","Header","as","textAlign","Form","Input","fluid","iconPosition","placeholder","onChange","defineProperty","Button","color","size","onClick","Message","Link","to","Component","connect","_ref","removeItem","post","window","location","replace","LoginAdmin","_this$props","loginUserAdmin","_ref2","Register","handleConfirmPasswordChanged","confirmPasswordChanged","handleEmailChanged","emailChanged","handleRegister","registerUser","Redirect","registerSuccess","registerFail","Services","poll_Id","getAllPolls","PollList","_Component","apply","inherits","createClass","key","link","Segment","map","p","userRouter","adminRouter","Menu","_this$state","Home","menu_Menu","PollList_PollList","getAllQuestions","poll_id","selectAnswer","checked","textAnswer","QuestionTypeRadio","handleSelected","newOptions","selected","setState","_this2","Group","grouped","Field","label","control","pitanje","QuestionTypeText","QuestionTypeItem","item","QuestionTypeCheckbox","questionTypes_QuestionTypeItem","QuestionList","q","questionTypes_QuestionTypeRadio","questionTypes_QuestionTypeCheckbox","questionTypes_QuestionTypeText","Poll","match","params","sendPollAnswers","QuestionList_QuestionList","positive","Success","style","marginTop","align","MainRouter","Switch","Route","path","component","ModalUpdateQuestion","handleQuestionName","currentQuestion","handleOptionInput","currentOption","addOption","pollId","removeOption","deleteOption","updateQuestion","Modal","trigger","Icon","closeIcon","icon","content","Content","Actions","UpdateQuestionList","negative","float","ModalUpdateQuestion_ModalUpdateQuestion","ModalCreateQuestion","handleSelectedType","addQuestion","_this$state2","update","createQuestion","UpdatePoll","deletePoll","ModalCreateQuestion_ModalCreateQuestion","UpdateQuestionList_UpdateQuestionList","optionText","optionId","Main","CreatedQuestionsList","deleteCreatedQuestion","CreatePoll","handlePollName","pollName","sendPoll","marginBottom","CreatedQuestionsList_CreatedQuestionsList","position","bottom","left","AdminRouter","LoginRouter","exact","Router","router_LoginRouter","store","createStore","reducer","composeWithDevTools","applyMiddleware","ReduxThunk","App","es","BrowserRouter","router_Router","Boolean","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.952dc0d5.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const SET_USER = 'SET_USER';\r\nexport const SIGN_OUT = 'SIGN_OUT';\r\n\r\nexport const setUser = (user) => {\r\n    return {\r\n        type: SET_USER,\r\n        payload: user,\r\n    }\r\n};\r\n\r\nexport const signOut = () => {\r\n    return {\r\n        type: SIGN_OUT\r\n    }\r\n};\r\n\r\nexport const signOutUser = () => dispatch => {\r\n    localStorage.removeItem('token');\r\n    axios.defaults.headers.common['Authorization'] = '';\r\n    dispatch(signOut());\r\n};\r\n","import {SET_USER, SIGN_OUT} from \"../actions/UserActions\";\r\n\r\nconst INITIAL_STATE = {\r\n    username: '',\r\n    id: '',\r\n    token: '',\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case SET_USER:\r\n            return {...state, ...action.payload };\r\n        case SIGN_OUT:\r\n            return INITIAL_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n}","import axios from 'axios';\r\nimport { setUser } from \"./UserActions\";\r\n\r\nexport const USERNAME_CHANGED = \"USERNAME_CHANGED\";\r\nexport const PASSWORD_CHANGED = \"PASSWORD_CHANGED\";\r\nexport const LOGIN_USER_SUCCESS = \"LOGIN_USER_SUCCESS\";\r\nexport const LOGIN_USER_FAIL = \"LOGIN_USER_FAIL\";\r\nexport const LOGIN_USER = \"LOGIN_USER\";\r\nexport const GET_USER_STARTED = \"GET_USER_STARTED\";\r\nexport const GET_USER_FAILED = \"GET_USER_FAILED\";\r\nexport const GET_CURRENT_USER_SUCCESS = \"GET_CURRENT_USER_SUCCESS\";\r\n\r\nexport const usernameChanged = (username) => {\r\n    return {\r\n        type: USERNAME_CHANGED,\r\n        payload: username\r\n    }\r\n};\r\n\r\nexport const passwordChanged = (password) =>{\r\n    return {\r\n        type: PASSWORD_CHANGED,\r\n        payload: password\r\n    }\r\n};\r\n\r\nexport const loginUserFail = (dispatch, error) => {\r\n    dispatch( {\r\n        type: LOGIN_USER_FAIL,\r\n        payload: error\r\n    });\r\n};\r\n\r\nexport const loginUserSuccess = (dispatch, user) =>{\r\n    dispatch({\r\n        type: LOGIN_USER_SUCCESS,\r\n        payload: user\r\n    });\r\n};\r\n\r\nexport const getUserStarted = () =>{\r\n    return {\r\n        type: GET_USER_STARTED\r\n    }\r\n};\r\n\r\nexport const getUserFailed = () =>{\r\n    return {\r\n        type: GET_USER_FAILED\r\n    }\r\n};\r\n\r\nexport const getCurrentUserSuccess = () =>{\r\n    return {\r\n        type: GET_CURRENT_USER_SUCCESS\r\n    }\r\n};\r\n\r\nexport const getUser = () => dispatch => {\r\n    dispatch(getUserStarted());\r\n    axios.get('/users/get-current-user')\r\n        .then(res => {\r\n            axios.defaults.headers.common['Authorization'] = localStorage.getItem('token')?localStorage.getItem('token'): '';\r\n            dispatch(setUser({ username: res.data.username, id: res.data.id, token: res.data.token}));\r\n            localStorage.setItem('token', res.data.token);\r\n            dispatch(getCurrentUserSuccess());\r\n\r\n        }).catch(err => {\r\n            console.log('getuser err', err);\r\n        dispatch(getUserFailed());\r\n    })\r\n};\r\n\r\nexport const getUserAdmin = () => dispatch => {\r\n    dispatch(getUserStarted());\r\n    axios.get('/users/get-current-admin')\r\n        .then(res => {\r\n            axios.defaults.headers.common['Authorization'] = localStorage.getItem('token')?localStorage.getItem('token'): '';\r\n            dispatch(setUser({ username: res.data.username, id: res.data.id, role: res.data.role, token: res.data.token}));\r\n            localStorage.setItem('token', res.data.token);\r\n            dispatch(getCurrentUserSuccess());\r\n\r\n        }).catch(err => {\r\n        dispatch(getUserFailed());\r\n    })\r\n};\r\n\r\nexport  const loginUser = ({username, password}) => dispatch => {\r\n    dispatch({ type: LOGIN_USER });\r\n    console.log('username', username + password)\r\n    axios.post('/users/login', {username, password})\r\n        .then(res => {\r\n            dispatch(setUser({ username: res.data.username, id: res.data.id, token: res.data.token}));\r\n            localStorage.setItem('token', res.data.token);\r\n            axios.defaults.headers.common['Authorization'] = localStorage.getItem('token')?localStorage.getItem('token'): '';\r\n            loginUserSuccess(dispatch, res.data);\r\n            window.location.replace(\"/\");\r\n        })\r\n        .catch( (err) => {\r\n            loginUserFail(dispatch, 'Invalid login!')\r\n        });\r\n};\r\n\r\nexport  const loginUserAdmin = ({username, password}) => dispatch => {\r\n    console.log(\"loginUserAdmin\");\r\n    dispatch({ type: LOGIN_USER });\r\n    axios.post('/users/login-admin', {username, password})\r\n        .then(res => {\r\n            dispatch(setUser({ username: res.data.username, id: res.data.id, role: res.data.role, token: res.data.token}));\r\n            localStorage.setItem('token', res.data.token);\r\n            console.log('res.data.token', res.data.token);\r\n            axios.defaults.headers.common['Authorization'] = localStorage.getItem('token')?localStorage.getItem('token'): '';\r\n            loginUserSuccess(dispatch, res.data);\r\n            window.location.replace(\"/admin/main\");\r\n        })\r\n        .catch( () => loginUserFail(dispatch, 'Invalid login!'));\r\n};","import {\r\n    LOGIN_USER,\r\n    LOGIN_USER_SUCCESS,\r\n    LOGIN_USER_FAIL,\r\n    USERNAME_CHANGED,\r\n    PASSWORD_CHANGED,\r\n    GET_USER_STARTED,\r\n    GET_USER_FAILED,\r\n    GET_CURRENT_USER_SUCCESS\r\n} from \"../actions/LoginActions\";\r\nimport {SIGN_OUT} from \"../actions/UserActions\";\r\n\r\nconst INITIAL_STATE = {\r\n    username: '',\r\n    password: '',\r\n    loading: false,\r\n    error: '',\r\n    successLogin: false,\r\n    getUserLoading: false,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case USERNAME_CHANGED:\r\n            return {...state, username: action.payload };\r\n        case PASSWORD_CHANGED:\r\n            return {...state, password: action.payload };\r\n        case LOGIN_USER_SUCCESS:\r\n            return {...INITIAL_STATE, successLogin: true};\r\n        case LOGIN_USER_FAIL:\r\n            return {...state, error: action.payload, loading: false };\r\n        case GET_USER_STARTED:\r\n            return {...state, getUserLoading: true };\r\n        case GET_CURRENT_USER_SUCCESS:\r\n            return {...state, getUserLoading: false };\r\n        case GET_USER_FAILED:\r\n            return {...state, getUserLoading: false };\r\n        case LOGIN_USER:\r\n            return {...state, loading: true };\r\n        case SIGN_OUT:\r\n            return INITIAL_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    USERNAME_CHANGED,\r\n    PASSWORD_CHANGED,\r\n    CONFIRM_PASSWORD_CHANGED,\r\n    EMAIL_CHANGED,\r\n    REGISTER_SUCCESS,\r\n    REGISTER_FAIL,\r\n    REGISTER_USER\r\n} from \"../actions/RegisterActions\";\r\nimport {SIGN_OUT} from \"../actions/UserActions\";\r\n\r\nconst INITIAL_STATE = {\r\n    username: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    email: '',\r\n    loading: false,\r\n    error: '',\r\n    successRegister: null,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case USERNAME_CHANGED:\r\n            return {...state, username: action.payload };\r\n        case PASSWORD_CHANGED:\r\n            return {...state, password: action.payload };\r\n        case CONFIRM_PASSWORD_CHANGED:\r\n            return {...state, confirmPassword: action.payload };\r\n        case EMAIL_CHANGED:\r\n            return {...state, email: action.payload };\r\n        case REGISTER_SUCCESS:\r\n            return {...INITIAL_STATE, successRegister: true};\r\n        case REGISTER_FAIL:\r\n            return {...state, error: action.payload, loading: false };\r\n        case REGISTER_USER:\r\n            return {...state, loading: true };\r\n        case SIGN_OUT:\r\n            return INITIAL_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    GET_ALL_POLLS_SUCCESS,\r\n    GET_ALL_POLLS_STARTED,\r\n    GET_ALL_POLLS_FAILED\r\n} from \"../actions/ActionTypes\";\r\nimport { SIGN_OUT } from \"../actions/UserActions\";\r\n\r\nconst INITIAL_STATE = {\r\n    polls: [],\r\n    loading: false,\r\n    error: '',\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case GET_ALL_POLLS_STARTED:\r\n            return {...state, loading: true };\r\n       case GET_ALL_POLLS_FAILED:\r\n            return {...state, error: action.payload, loading: false };\r\n        case GET_ALL_POLLS_SUCCESS:\r\n            return {...state, polls: action.payload, loading: false };\r\n        case SIGN_OUT:\r\n            return INITIAL_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n}","import {\r\n    GET_ALL_QUESTIONS_FAILED,\r\n    GET_ALL_QUESTIONS_STARTED,\r\n    GET_ALL_QUESTIONS_SUCCESS,\r\n    UPDATE_QUESTION, REMOVE_QUESTION,\r\n    ADD_NEW_QUESTION\r\n} from \"../actions/ActionTypes\";\r\nimport { SIGN_OUT } from \"../actions/UserActions\";\r\n\r\nconst INITIAL_STATE = {\r\n    questions: [],\r\n    loading: false,\r\n    error: '',\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case GET_ALL_QUESTIONS_STARTED:\r\n            return {...state, loading: true };\r\n       case GET_ALL_QUESTIONS_FAILED:\r\n            return {...state, error: action.payload, loading: false };\r\n        case GET_ALL_QUESTIONS_SUCCESS:\r\n            return {...state, questions: action.payload, loading: false };\r\n        case UPDATE_QUESTION:\r\n            return {...state, questions: changeQuestion(state.questions, action.payload) };\r\n        case REMOVE_QUESTION:\r\n            return {...state, questions: removeQuestion(state.questions, action.payload) };\r\n        case ADD_NEW_QUESTION:\r\n            return {...state, questions: [\r\n                ...state.questions,\r\n                {text: action.payload.name, tip: action.payload.selectedType, opcije: action.payload.options }\r\n                ] \r\n            };;\r\n        case SIGN_OUT:\r\n            return INITIAL_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction changeQuestion(questions, updatedQuestion) {\r\n    let findIndex = questions.findIndex(el => el.id === updatedQuestion.questionId);\r\n    questions[findIndex] = {...questions[findIndex], text: updatedQuestion.questionText}\r\n    return questions;\r\n}\r\n\r\nfunction removeQuestion(questions, deleteQuestion) {\r\n    let newQuestions = questions.filter(el => el.id !== deleteQuestion.questionId);\r\n    return newQuestions;\r\n}","import {\r\n    SET_ANSWER,\r\n    SEND_POLL_ANSWERS_FAILED,\r\n    SEND_POLL_ANSWERS_STARTED,\r\n    SEND_POLL_ANSWERS_SUCCESS\r\n} from \"../actions/ActionTypes\";\r\nimport { SIGN_OUT } from \"../actions/UserActions\";\r\n\r\nconst INITIAL_STATE = {\r\n    answers: [],\r\n    loading: false,\r\n    error: '',\r\n    success: false,\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case SET_ANSWER:\r\n            return {...state, answers: handleAnswers(state.answers, action.payload) };\r\n        case SEND_POLL_ANSWERS_STARTED:\r\n            return {...state, loading: true };\r\n        case SEND_POLL_ANSWERS_FAILED:\r\n            return {...state, error: action.payload, loading: false };\r\n        case SEND_POLL_ANSWERS_SUCCESS:\r\n            return {...state, success: true, loading: false };\r\n        case SIGN_OUT:\r\n            return INITIAL_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction handleAnswers(answers, newAnswer) {\r\n    let find = answers.find(el => el.option_id === newAnswer.option_id);\r\n    if (!find) {\r\n        let checkType = answers.find(el => \r\n            el.type_id && el.question_id &&\r\n            el.question_id === newAnswer.question_id &&\r\n            el.type_id === newAnswer.type_id);\r\n        if (checkType && (checkType.type_id === 1 || checkType.type_id === 2)){\r\n            let index = answers.findIndex(el => el.option_id === checkType.option_id);\r\n            answers.splice(index, 1, newAnswer);\r\n        } else {\r\n            answers.push(newAnswer)\r\n        }\r\n    } else {\r\n        let index = answers.findIndex(el => el.option_id === newAnswer.option_id);\r\n        answers.splice(index, 1);\r\n    }\r\n\r\n    return answers;\r\n}","import {\r\n    CREATE_QUESTION,\r\n    DELETE_CREATED_QUESTION,\r\n} from \"../actions/ActionTypes\";\r\nimport { SIGN_OUT } from \"../actions/UserActions\";\r\n\r\nconst INITIAL_STATE = {\r\n    createdQuestions: [],\r\n    loading: false,\r\n    error: '',\r\n};\r\n\r\nexport default (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case CREATE_QUESTION:\r\n            return {...state, createdQuestions: [...state.createdQuestions, action.payload] };\r\n        case DELETE_CREATED_QUESTION:\r\n            return {...state, createdQuestions: checkQuestions(state.createdQuestions, action.payload) };\r\n        case SIGN_OUT:\r\n            return INITIAL_STATE;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction checkQuestions(createdQuestions, deleteIndex) {\r\n    let newQuestions = createdQuestions.filter((el, i) => deleteIndex !== i);\r\n    return newQuestions;\r\n}","import { combineReducers } from 'redux';\r\nimport UserReducer from './UserReducer';\r\nimport LoginReducer from './LoginReducer';\r\nimport RegisterReducer from './RegisterReducer';\r\nimport PollReducer from './PollReducer';\r\nimport QuestionReducer from './QuestionReducer';\r\nimport AnswerReducer from './AnswerReducer';\r\nimport CreatePollReducer from './CreatePollReducer'\r\n\r\nexport default combineReducers({\r\n    user: UserReducer,\r\n    login: LoginReducer,\r\n    polls: PollReducer,\r\n    question: QuestionReducer,\r\n    answer: AnswerReducer,\r\n    createPoll: CreatePollReducer,\r\n    register: RegisterReducer,\r\n});","// POLL ACTIONS\r\nexport const GET_ALL_POLLS_STARTED = \"GET_ALL_POLLS_STARTED\";\r\nexport const GET_ALL_POLLS_SUCCESS = \"GET_ALL_POLLS_SUCCESS\";\r\nexport const GET_ALL_POLLS_FAILED = \"GET_ALL_POLLS_FAILED\";\r\n\r\n// QUESTION ACTIONS\r\nexport const GET_ALL_QUESTIONS_STARTED = \"GET_ALL_QUESTIONS_STARTED\";\r\nexport const GET_ALL_QUESTIONS_SUCCESS = \"GET_ALL_QUESTIONS_SUCCESS\";\r\nexport const GET_ALL_QUESTIONS_FAILED = \"GET_ALL_QUESTIONS_FAILED\";\r\nexport const REMOVE_QUESTION_OPTION = \"REMOVE_QUESTION_OPTION\";\r\nexport const ADD_QUESTION_OPTION = \"ADD_QUESTION_OPTION\";\r\nexport const UPDATE_QUESTION = \"UPDATE_QUESTION\";\r\nexport const REMOVE_QUESTION = \"REMOVE_QUESTION\";\r\nexport const ADD_NEW_QUESTION = \"ADD_NEW_QUESTION\";\r\n\r\n\r\n// ANSWER ACTIONS\r\nexport const SET_ANSWER = \"SET_ANSWER\";\r\nexport const SEND_POLL_ANSWERS_STARTED = \"SEND_POLL_ANSWERS_STARTED\";\r\nexport const SEND_POLL_ANSWERS_SUCCESS = \"SEND_POLL_ANSWERS_SUCCESS\";\r\nexport const SEND_POLL_ANSWERS_FAILED = \"SEND_POLL_ANSWERS_FAILED\";\r\n\r\n// CREATE POLL ACTOPNS\r\nexport const CREATE_QUESTION = \"CREATE_QUESTION\";\r\nexport const DELETE_CREATED_QUESTION = \"DELETE_CREATED_QUESTION\";\r\nexport const SEND_POLL_STARTED = \"SEND_POLL_STARTED\";\r\nexport const SEND_POLL_FAILED = \"SEND_POLL_FAILED\";\r\nexport const SEND_POLL_SUCCESS = \"SEND_POLL_SUCCESS\";\r\nexport const DELETE_POLL = \"DELETE_POLL\";","import axios from 'axios';\r\nimport {setUser} from \"./UserActions\";\r\n\r\nexport const USERNAME_CHANGED = \"USERNAME_CHANGED\";\r\nexport const PASSWORD_CHANGED = \"PASSWORD_CHANGED\";\r\nexport const CONFIRM_PASSWORD_CHANGED = \"CONFIRM_PASSWORD_CHANGED\";\r\nexport const EMAIL_CHANGED = 'EMAIL_CHANGED';\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\r\nexport const REGISTER_USER = \"REGISTER_USER\";\r\n\r\nexport const usernameChanged = (username) => {\r\n    return {\r\n        type: USERNAME_CHANGED,\r\n        payload: username\r\n    }\r\n};\r\n\r\nexport const passwordChanged = (password) => {\r\n    return {\r\n        type: PASSWORD_CHANGED,\r\n        payload: password\r\n    }\r\n};\r\n\r\nexport const confirmPasswordChanged = (confirmPassword) => {\r\n    return {\r\n        type: CONFIRM_PASSWORD_CHANGED,\r\n        payload: confirmPassword\r\n    }\r\n};\r\n\r\nexport const emailChanged = (email) => {\r\n    return {\r\n        type: EMAIL_CHANGED,\r\n        payload: email\r\n    }\r\n};\r\n\r\nexport const registerFail = (dispatch, error) => {\r\n    dispatch( {\r\n        type: REGISTER_FAIL,\r\n        payload: error\r\n    });\r\n};\r\n\r\nexport const registerSuccess = (dispatch, successRegister) =>{\r\n    dispatch({\r\n        type: REGISTER_SUCCESS,\r\n        payload: successRegister\r\n    });\r\n};\r\n\r\nexport  const registerUser = ({username, password, confirmPassword, email}) => dispatch => {\r\n    if (password !== confirmPassword) return;\r\n    dispatch({ type: REGISTER_USER });\r\n    axios.post('/users', {username, password, email})\r\n        .then(res => {\r\n            registerSuccess(dispatch, true);\r\n        })\r\n        .catch( () => registerFail(dispatch, 'Invalid register!'));\r\n};","import React, { Component } from 'react';\r\nimport {Grid, Form, Header, Button, Message, Container} from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { usernameChanged, passwordChanged, loginUser } from '../../actions/LoginActions';\r\nimport './Login.css';\r\nimport { signOutUser } from \"../../actions/UserActions\";\r\n\r\nclass Login extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            username: \"\",\r\n            password: \"\",\r\n        }\r\n    }\r\n\r\n    handleUsernameChanged = e => {\r\n        this.props.usernameChanged(e.target.value);\r\n    };\r\n    handlePasswordChanged = e => {\r\n        this.props.passwordChanged(e.target.value);\r\n    };\r\n    handleLogin = () => {\r\n        const { username, password } = this.props.login;\r\n        this.props.loginUser({ username, password });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.signOutUser();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='background'>\r\n                <Container>\r\n                    <Grid centered>\r\n                        <Grid.Column mobile={16} tablet={8} computer={6}>\r\n                            <Header as='h4' textAlign='center'>\r\n                                Log-in to your account\r\n                            </Header>\r\n                            <Form className='input-custom'>\r\n                                <Form.Input className='input-custom'\r\n                                    fluid\r\n                                    iconPosition='left'\r\n                                    placeholder='Username'\r\n                                    onChange={this.handleUsernameChanged}\r\n                                    value={this.props.login.username}\r\n                                    name=\"username\"\r\n                                />\r\n                                <Form.Input className='input-custom'\r\n                                    className='input-custom'\r\n                                    fluid\r\n                                    iconPosition='left'\r\n                                    placeholder='Password'\r\n                                    type='password'\r\n                                    onChange={this.handlePasswordChanged}\r\n                                    value={this.props.login.password}\r\n                                    name=\"password\"\r\n                                />\r\n                                <Button\r\n                                    color='white'\r\n                                    fluid size='large'\r\n                                    onClick={this.handleLogin}\r\n                                    loading={this.props.loading}\r\n                                >Login</Button>\r\n                                {this.props.error && <div>{this.props.error}</div>}\r\n                            </Form>\r\n                            <Message>\r\n                                <h3>Not registered?</h3> <Link to=\"/register\"> Sign up </Link>\r\n                            </Message>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ login }) => ({ login });\r\n\r\nexport default connect(mapStateToProps, {\r\n    usernameChanged, passwordChanged, signOutUser, loginUser\r\n})(Login);\r\n","import React, { Component } from 'react';\r\nimport {Grid, Form, Header, Button, Message, Container} from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { usernameChanged, passwordChanged, loginUserAdmin } from '../../actions/LoginActions';\r\nimport '../login/Login.css';\r\n\r\nclass LoginAdmin extends Component {\r\n\r\n    handleUsernameChanged = e => {\r\n        this.props.usernameChanged(e.target.value);\r\n    };\r\n    handlePasswordChanged = e => {\r\n        this.props.passwordChanged(e.target.value);\r\n    };\r\n    handleLogin = () => {\r\n        const { username, password } = this.props;\r\n        this.props.loginUserAdmin({ username, password });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='background'>\r\n                <Container>\r\n                    <Grid centered>\r\n                        <Grid.Column mobile={16} tablet={8} computer={6}>\r\n                            <Header as='h4' textAlign='center'>\r\n                                Log-in to your account\r\n                            </Header>\r\n                            <Form className='input-custom'>\r\n                                <Form.Input className='input-custom'\r\n                                    fluid\r\n                                    iconPosition='left'\r\n                                    placeholder='Username'\r\n                                    onChange={this.handleUsernameChanged}\r\n                                    value={this.props.username}\r\n                                    name=\"username\"\r\n                                />\r\n                                <Form.Input className='input-custom'\r\n                                    fluid\r\n                                    iconPosition='left'\r\n                                    placeholder='Password'\r\n                                    type='password'\r\n                                    onChange={this.handlePasswordChanged}\r\n                                    value={this.props.password}\r\n                                    name=\"password\"\r\n                                />\r\n                                <Button\r\n                                    color='white'\r\n                                    fluid size='large'\r\n                                    onClick={this.handleLogin}\r\n                                    loading={this.props.loading}\r\n                                >Login</Button>\r\n                                {this.props.error && <div>{this.props.error}</div>}\r\n                            </Form>\r\n                            <Message>\r\n                                <h3>This is login page for admin team!</h3>\r\n                            </Message>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ login, user }) => {\r\n    const { username, password, error, successLogin, loading} = login;\r\n    const { role } = user;\r\n    return { username, password, error, successLogin, loading, role};\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    usernameChanged, passwordChanged, loginUserAdmin\r\n})(LoginAdmin);\r\n","import React, { Component } from 'react';\r\nimport { Grid, Header, Segment, Button, Message, Form, Container, Image } from 'semantic-ui-react';\r\nimport { Link, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport {registerUser, passwordChanged, usernameChanged, confirmPasswordChanged, emailChanged} from \"../../actions/RegisterActions\";\r\nimport '../login/Login.css';\r\n\r\nclass Register extends Component {\r\n\r\n    handleUsernameChanged = e => {\r\n        this.props.usernameChanged(e.target.value);\r\n    };\r\n    handlePasswordChanged = e => {\r\n        this.props.passwordChanged(e.target.value);\r\n    };\r\n    handleConfirmPasswordChanged = e => {\r\n        this.props.confirmPasswordChanged(e.target.value);\r\n    };\r\n    handleEmailChanged = e => {\r\n        this.props.emailChanged(e.target.value);\r\n    };\r\n    handleRegister = () => {\r\n        const { username, password, confirmPassword, email } = this.props;\r\n        this.props.registerUser({ username, password, confirmPassword, email });\r\n    };\r\n\r\n    render() {\r\n        if (this.props.successRegister){\r\n            return <Redirect to='/login' />\r\n        }\r\n        if (this.props.successRegister === false ) {\r\n            return <div>Error</div>\r\n        }\r\n        return (\r\n            <div className='background'>\r\n                <Container>\r\n                    <Grid centered>\r\n                        <Grid.Column mobile={16} tablet={8} computer={6}>\r\n                            <Header as='h4' textAlign='center'>\r\n                                Please complete your registration by filling the form\r\n                            </Header>\r\n                            <Form size='large'>\r\n                                <Form.Input className='input-custom'\r\n                                    fluid\r\n                                    iconPosition='left'\r\n                                    placeholder='Username'\r\n                                    onChange={this.handleUsernameChanged}\r\n                                    value={this.props.username}\r\n                                    name=\"username\"\r\n                                />\r\n                                <Form.Input className='input-custom'\r\n                                    fluid\r\n                                    iconPosition='left'\r\n                                    placeholder='E-mail address'\r\n                                    onChange={this.handleEmailChanged}\r\n                                    value={this.props.email}\r\n                                    name=\"email\"\r\n                                />\r\n                                <Form.Input className='input-custom'\r\n                                    fluid\r\n                                    iconPosition='left'\r\n                                    placeholder='Password'\r\n                                    type='password'\r\n                                    onChange={this.handlePasswordChanged}\r\n                                    value={this.props.password}\r\n                                    name=\"password\"\r\n                                />\r\n                                <Form.Input className='input-custom'\r\n                                    fluid\r\n                                    iconPosition='left'\r\n                                    placeholder='Confirm password'\r\n                                    type='password'\r\n                                    onChange={this.handleConfirmPasswordChanged}\r\n                                    value={this.props.confirmPassword}\r\n                                    name=\"confirmPassword\"\r\n                                />\r\n\r\n                                <Button\r\n                                    color='white'\r\n                                    fluid size='large'\r\n                                    onClick={this.handleRegister}\r\n                                >\r\n                                    Register</Button>\r\n                            </Form>\r\n                            <Message>\r\n                                <h3>Already registered?</h3> <Link to=\"/login\"> Sign in </Link>\r\n                            </Message>\r\n                        </Grid.Column>\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ register }) => {\r\n    const { username, password, error, successRegister, loading, email, confirmPassword} = register;\r\n    return { username, password, error, successRegister, loading, email, confirmPassword};\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n    usernameChanged, passwordChanged, confirmPasswordChanged, emailChanged, registerUser\r\n})(Register);","export const Services = {\r\n    getAllPolls: '/users/get-all-polls',\r\n    getAllQuestions: (poll_Id) => '/users/get-all-questions/' + poll_Id,\r\n    sendPollAnswers: '/users/send-poll-results',\r\n    sendPoll: '/users/send-poll',\r\n    deleteOption: '/users/delete-option',\r\n    addOption: '/users/add-option',\r\n    updateQuestion: '/users/update-question',\r\n    deleteQuestion: '/users/delete-question',\r\n    deletePoll: '/users/delete-poll',\r\n    addQuestion: '/users/add-question',\r\n}","import axios from 'axios';\r\nimport {\r\n    GET_ALL_POLLS_STARTED,\r\n    GET_ALL_POLLS_SUCCESS,\r\n    GET_ALL_POLLS_FAILED,\r\n    DELETE_POLL,\r\n} from './ActionTypes';\r\nimport { Services } from '../services/Services'\r\n\r\nconst getAllPollsStarted = () => {\r\n    return ({\r\n        type: GET_ALL_POLLS_STARTED\r\n    });\r\n};\r\n\r\nconst getAllPollsSuccess = (polls) => {\r\n    return ({\r\n        type: GET_ALL_POLLS_SUCCESS,\r\n        payload: polls\r\n    });\r\n};\r\n\r\nconst getAllPollsFailed = (error) => {\r\n    return ({\r\n        type: GET_ALL_POLLS_FAILED,\r\n        payload: error\r\n    });\r\n};\r\n\r\nexport  const getAllPolls = () => dispatch => {\r\n    dispatch(getAllPollsStarted());\r\n    axios.get(Services.getAllPolls)\r\n        .then(res => {\r\n            dispatch(getAllPollsSuccess(res.data));\r\n        })\r\n        .catch( () => dispatch(getAllPollsFailed('Something went wrong!')));\r\n};\r\n\r\nconst removePoll = () => {\r\n    return ({\r\n        type: DELETE_POLL,\r\n    });\r\n};\r\n\r\nexport const deletePoll = (pollId) => dispatch => {\r\n    console.log('pollId', pollId)\r\n    axios.post(Services.deletePoll, { pollId })\r\n        .then(res => {\r\n            dispatch(removePoll());\r\n            window.location.replace(\"/admin/main\");\r\n        })\r\n        .catch( () => console.log('Something went wrong!'));\r\n};","import React, { Component } from 'react';\r\nimport {Container, Segment, Header } from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport class PollList extends Component {\r\n    render() {\r\n        const { polls, link } = this.props;\r\n        return (\r\n            <Container>\r\n                <Segment className='poll'>\r\n                    {polls.map( (p, i) =>\r\n                        <Link key={p.id} to={link + p.id}>\r\n                            <Header as='h2' className='title'>{i + 1}) {p.name}</Header>\r\n                        </Link>\r\n                    )}\r\n                </Segment>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Container, Segment } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst userRouter = [\r\n    { name: \"View all\", link: \"/\" },\r\n    { name: \"Log out\", link: \"/login\" }\r\n];\r\n\r\nconst adminRouter = [\r\n    { name: \"View all\", link: \"/admin/main\" },\r\n    { name: \"Create\", link: \"/admin/create\" },\r\n    { name: \"Log out\", link: \"/login\" }\r\n];\r\n\r\nclass Menu extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            adminRouter: adminRouter,\r\n            userRouter: userRouter\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { adminRouter, userRouter } = this.state;\r\n        const { role } = this.props;\r\n        return (\r\n                <Segment className='header'>\r\n                    <Container>\r\n                        <span>Welcome! | MOP - Questionnaire</span>\r\n                        {\r\n                            role === \"user\"\r\n                            ?\r\n                            userRouter.map((el, i) => <Link key={i} className='link' to={el.link}>{el.name}</Link>)\r\n                            :\r\n                            adminRouter.map((el, i) => <Link key={i} className='link' to={el.link}>{el.name}</Link>)\r\n                        }\r\n\r\n                    </Container>\r\n                </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { getUser } from '../../actions/LoginActions';\r\nimport { getAllPolls } from '../../actions/PollActions';\r\nimport { PollList } from '../../components/pollList/PollList';\r\nimport Menu from '../../components/menu/Menu';\r\n\r\nclass Home extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.getUser();\r\n        this.props.getAllPolls();\r\n    }\r\n\r\n    render() {\r\n        if (!localStorage.getItem('token')){\r\n            return <Redirect to=\"/login\" />\r\n        }\r\n        return (\r\n            <div>\r\n                <Menu role=\"user\" />\r\n                {\r\n                    this.props.polls.loading || this.props.user.loading\r\n                    ?\r\n                    <h1>Loading---</h1>\r\n                    :\r\n                    <PollList link={\"poll/\"} polls={this.props.polls.polls} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ user, polls }) => {\r\n    return { user, polls };\r\n};\r\nexport default connect(mapStateToProps, {getUser, getAllPolls})(Home);","import axios from 'axios';\r\nimport { Services } from '../services/Services';\r\nimport {\r\n    GET_ALL_QUESTIONS_FAILED, GET_ALL_QUESTIONS_STARTED, GET_ALL_QUESTIONS_SUCCESS,\r\n    ADD_QUESTION_OPTION, REMOVE_QUESTION_OPTION,\r\n    UPDATE_QUESTION, REMOVE_QUESTION,\r\n    ADD_NEW_QUESTION\r\n} from './ActionTypes';\r\n\r\nconst getAllQuestionsStarted = () => {\r\n    return ({\r\n        type: GET_ALL_QUESTIONS_STARTED\r\n    });\r\n};\r\n\r\nconst getAllQuestionsSuccess = (polls) => {\r\n    return ({\r\n        type: GET_ALL_QUESTIONS_SUCCESS,\r\n        payload: polls\r\n    });\r\n};\r\n\r\nconst getAllQuestionsFailed = (error) => {\r\n    return ({\r\n        type: GET_ALL_QUESTIONS_FAILED,\r\n        payload: error\r\n    });\r\n};\r\n\r\nexport  const getAllQuestions = (poll_id) => dispatch => {\r\n    dispatch(getAllQuestionsStarted());\r\n    axios.get(Services.getAllQuestions(poll_id))\r\n        .then(res => {\r\n            dispatch(getAllQuestionsSuccess(res.data));\r\n        })\r\n        .catch( () => dispatch(getAllQuestionsFailed('Something went wrong!')));\r\n};\r\n\r\nconst addQuestionOption = () => {\r\n    return ({\r\n        type: ADD_QUESTION_OPTION\r\n    });\r\n};\r\n\r\nconst deleteQuestionOption = () => {\r\n    return ({\r\n        type: REMOVE_QUESTION_OPTION\r\n    });\r\n};\r\n\r\nconst updateQuestionName = (payload) => {\r\n    return ({\r\n        type: UPDATE_QUESTION,\r\n        payload\r\n    });\r\n};\r\n\r\nconst removeQuestion = (payload) => {\r\n    return ({\r\n        type: REMOVE_QUESTION,\r\n        payload\r\n    });\r\n};\r\n\r\nexport const addOption = (optionText, pollId, questionId) => dispatch => {\r\n    axios.post(Services.addOption, { optionText, pollId, questionId })\r\n        .then(res => {\r\n            dispatch(addQuestionOption());\r\n        })\r\n        .catch( () => console.log('TODO - ERROR HANDLING!'));\r\n};\r\n\r\nexport const deleteOption = (optionId) => dispatch => {\r\n\r\n    axios.post(Services.deleteOption, { optionId })\r\n        .then(res => {\r\n            dispatch(deleteQuestionOption());\r\n        })\r\n        .catch( () => console.log('TODO - ERROR HANDLING!'));\r\n};\r\n\r\nexport const updateQuestion = (questionText, questionId) => dispatch => {\r\n    axios.post(Services.updateQuestion, { questionText, questionId })\r\n        .then(res => {\r\n            dispatch(updateQuestionName({questionText, questionId}));\r\n        })\r\n        .catch( () => console.log('TODO - ERROR HANDLING!'));\r\n};\r\n\r\nexport const deleteQuestion = (questionId, options) => dispatch => {\r\n    console.log('questionId', questionId, options)\r\n    axios.post(Services.deleteQuestion, { questionId, options })\r\n        .then(res => {\r\n            dispatch(removeQuestion({questionId}));\r\n        })\r\n        .catch( () => console.log('TODO - ERROR HANDLING!'));\r\n};\r\n\r\nconst addNewQuestion = (payload) => {\r\n    return ({\r\n        type: ADD_NEW_QUESTION,\r\n        payload\r\n    });\r\n};\r\n\r\nexport const addQuestion = (currentQuestion, pollId) => dispatch => {\r\n    console.log('front addquestion', currentQuestion);\r\n    console.log('front pollId', pollId);\r\n    axios.post(Services.addQuestion, { currentQuestion, pollId })\r\n        .then(res => {\r\n            dispatch(addNewQuestion(currentQuestion));\r\n        })\r\n        .catch( () => console.log('TODO - ERROR HANDLING!'));\r\n};","import axios from 'axios';\r\nimport {\r\n    SET_ANSWER,\r\n    SEND_POLL_ANSWERS_FAILED,\r\n    SEND_POLL_ANSWERS_STARTED,\r\n    SEND_POLL_ANSWERS_SUCCESS\r\n} from './ActionTypes';\r\nimport { Services } from '../services/Services';\r\n\r\nconst setAnswer = (payload) => {\r\n    return ({\r\n        type: SET_ANSWER,\r\n        payload\r\n    });\r\n};\r\n\r\nexport const selectAnswer = (text, question_id, option_id, type_id, checked, textAnswer) => dispatch => {\r\n    dispatch(setAnswer(\r\n        {text, question_id, option_id, type_id, checked, textAnswer}\r\n    ));\r\n};\r\n\r\nconst sendPollAnswersStarted = () => {\r\n    return ({\r\n        type: SEND_POLL_ANSWERS_STARTED\r\n    });\r\n};\r\n\r\nconst sendPollAnswersSuccess = () => {\r\n    return ({\r\n        type: SEND_POLL_ANSWERS_SUCCESS\r\n    });\r\n};\r\n\r\nconst sendPollAnswersFailed = (error) => {\r\n    return ({\r\n        type: SEND_POLL_ANSWERS_FAILED,\r\n        payload: error\r\n    });\r\n};\r\n\r\nexport const sendPollAnswers = (options, poll_id) => dispatch => {\r\n    dispatch(sendPollAnswersStarted());\r\n    axios.post(Services.sendPollAnswers, { options, poll_id })\r\n        .then(res => {\r\n            dispatch(sendPollAnswersSuccess());\r\n            window.location.replace(\"/success\");\r\n        })\r\n        .catch( () => dispatch(sendPollAnswersFailed('Something went wrong!')));\r\n};","import React, { Component } from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { selectAnswer } from '../../actions/AnswerActions';\r\n\r\nclass QuestionTypeRadio extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            options: this.props.options,\r\n        }\r\n    }\r\n\r\n    handleSelected = (index) => {\r\n        const { options } = this.state;\r\n        let newOptions = options.map((el, i) => {\r\n            if (i === index) {\r\n                console.log(el)\r\n                return ({...el, selected: !el.selected})\r\n            } else {\r\n                return ({...el, selected: false})\r\n            }\r\n        })\r\n\r\n        this.setState({\r\n            options: newOptions\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { type } = this.props;\r\n        return (\r\n            <Form>\r\n                <Form.Group grouped>\r\n                    { this.state.options.map( (el, i) => \r\n                        <Form.Field \r\n                            key={el.id}\r\n                            label={el.text}\r\n                            control='input'\r\n                            type={type}\r\n                            checked={el.selected}\r\n                            onChange={() => {\r\n                                this.handleSelected(i);\r\n                                this.props.selectAnswer(el.text, el.pitanje, el.id, 1);\r\n                            }}\r\n                            name={el.text} />\r\n                        )}\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ answer }) => ({ answer });\r\nexport default connect(mapStateToProps, {selectAnswer})(QuestionTypeRadio);","import React, { Component } from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { selectAnswer } from '../../actions/AnswerActions';\r\n\r\nclass QuestionTypeText extends Component {\r\n    render() {\r\n        const { options, selectAnswer } = this.props;\r\n        return (\r\n            <Form>\r\n                <Form.Group grouped>\r\n                    { options.map( el =>\r\n                        <h3 key={el.id}>\r\n                            <Form.Field\r\n                                        control='textarea'\r\n                                        onChange={(e) => {this.props.selectAnswer(el.text, el.pitanje, el.id, 4, true, e.target.value )}}\r\n                                        name={el.text} />\r\n                        </h3> )}\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ answer }) => ({ answer });\r\nexport default connect(mapStateToProps, {selectAnswer})(QuestionTypeText);","import React, { Component } from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { selectAnswer } from '../../actions/AnswerActions';\r\n\r\nclass QuestionTypeItem extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            selected: false\r\n        }\r\n    }\r\n\r\n    handleSelected = () => {\r\n        const { selected } = this.state;\r\n        this.setState({selected: !selected});\r\n    }\r\n\r\n    render() {\r\n        const { item, type } = this.props;\r\n        const { selected }= this.state;\r\n        return (\r\n            <h3>\r\n                <Form.Field \r\n                    label={item.text}\r\n                    control='input'\r\n                    type={type}\r\n                    checked={selected}\r\n                    onChange={() => {\r\n                        this.handleSelected();\r\n                        this.props.selectAnswer(item.text, item.pitanje, item.id, 3);\r\n                    }}\r\n                    name={item.text} />\r\n            </h3>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ answer }) => ({ answer });\r\nexport default connect(mapStateToProps, {selectAnswer})(QuestionTypeItem);","import React, { Component } from 'react';\r\nimport { Form } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport QuestionTypeItem from './QuestionTypeItem';\r\n\r\nclass QuestionTypeCheckbox extends Component {\r\n    render() {\r\n        const { options, type } = this.props;\r\n        return (\r\n            <Form>\r\n                <Form.Group grouped>\r\n                    { options.map( el => <QuestionTypeItem key={el.id} type={type} item={el} /> )}\r\n                </Form.Group>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ answer }) => ({ answer });\r\nexport default connect(mapStateToProps, {})(QuestionTypeCheckbox);","import React, { Component } from 'react';\r\nimport {Container, Segment } from 'semantic-ui-react';\r\nimport QuestionTypeRadio from '../questionTypes/QuestionTypeRadio';\r\nimport QuestionTypeText from '../questionTypes/QuestionTypeText';\r\nimport QuestionTypeCheckbox from '../questionTypes/QuestionTypeCheckbox';\r\n\r\nexport class QuestionList extends Component {\r\n    render() {\r\n        const { questions } = this.props;\r\n        return (\r\n            <Container>\r\n                <Segment className='poll'>\r\n                    {questions.map( (q, i) =>\r\n                         <Segment className='question' key={q.id}> \r\n                            {i+1}) {q.text}\r\n                            {(q.tip === 1 || q.tip === 2) && <QuestionTypeRadio type=\"radio\" options={q.opcije} selectAnswer={this.props.selectAnswer} />}\r\n                            {(q.tip === 3) &&  <QuestionTypeCheckbox type=\"checkbox\" options={q.opcije} selectAnswer={this.props.selectAnswer}/> }\r\n                            {(q.tip === 4) &&  <QuestionTypeText options={q.opcije} selectAnswer={this.props.selectAnswer}/> }\r\n                        </Segment>\r\n                    )}\r\n                </Segment>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getUser } from '../../actions/LoginActions';\r\nimport { getAllQuestions } from '../../actions/QuestionActions';\r\nimport { sendPollAnswers } from '../../actions/AnswerActions';\r\nimport { QuestionList } from '../../components/questionList/QuestionList';\r\nimport { Button } from 'semantic-ui-react';\r\nimport Menu from '../../components/menu/Menu';\r\n\r\nclass Poll extends Component {\r\n\r\n    handleAnswers = () => {\r\n        const { answers } = this.props.answer;  \r\n        const { id } = this.props.match.params;\r\n        this.props.sendPollAnswers(answers, id);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.getUser();\r\n        this.props.getAllQuestions(this.props.match.params.id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Menu role=\"user\" />\r\n                {\r\n                    this.props.question.loading\r\n                    ?\r\n                    <h1>Loading---</h1>\r\n                    :\r\n                    <div>\r\n                        <QuestionList questions={this.props.question.questions} />\r\n                        <Button\r\n                            positive\r\n                            color='green'\r\n                            fluid size='large'\r\n                            loading={this.props.answer.loading}\r\n                            onClick={this.handleAnswers}\r\n                            >\r\n                            SEND\r\n                        </Button>\r\n                    </div>\r\n                    \r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ question, user, answer }) => {\r\n    return { question, user, answer };\r\n};\r\nexport default connect(mapStateToProps, {getUser, getAllQuestions, sendPollAnswers})(Poll);","import React, { Component } from 'react';\r\nimport {Container, Segment } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Success extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div style={{marginTop: '150px'}} align=\"center\">\r\n                <Container>\r\n                    <Segment>\r\n                    Uspješno ste uradili Anketu! <br/>\r\n                    <Link to=\"/\">Vratite se na početnu stranicu.</Link>\r\n                    </Segment>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Success;","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Home from '../pages/home/Home';\r\nimport Poll from '../pages/poll/Poll';\r\nimport Success from '../pages/success/Success';\r\n\r\nclass MainRouter extends Component {\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/\" component={Home} />\r\n                <Route path=\"/poll/:id\" component={Poll} />\r\n                <Route path=\"/success\" component={Success} />\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainRouter;","import React, { Component } from 'react';\r\nimport MainRouter from './MainRouter';\r\nimport Menu from '../components/menu/Menu';\r\n\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Home from '../pages/home/Home';\r\nimport Poll from '../pages/poll/Poll';\r\nimport Success from '../pages/success/Success';\r\n\r\nclass UserRouter extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Menu role={\"user\"} />\r\n                <MainRouter />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default UserRouter;","import React, { Component } from 'react';\r\nimport { Modal, Button, Header, Icon, Input } from 'semantic-ui-react';\r\n\r\nexport class ModalUpdateQuestion extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            pollId: this.props.pollId,\r\n            currentQuestion: {\r\n                id: this.props.currentQuestion.id,\r\n                name: this.props.currentQuestion.name,\r\n                selectedType: this.props.currentQuestion.selectedType,\r\n                options: this.props.currentQuestion.options,\r\n            },\r\n            currentOption: {\r\n                text: ''\r\n            },\r\n        }\r\n    }\r\n\r\n    handleQuestionName = e => {\r\n        const { currentQuestion } = this.state;\r\n        this.setState( {currentQuestion: {...currentQuestion, name: e.target.value} })\r\n    }\r\n\r\n    handleOptionInput = e => {\r\n        this.setState( {currentOption: {text: e.target.value} })\r\n    }\r\n\r\n    addOption = () => {\r\n        const { currentOption, currentQuestion, pollId } = this.state;\r\n        if (currentOption.text === \"\") return;\r\n        this.props.addOption(currentOption.text, pollId, currentQuestion.id)\r\n        this.setState({\r\n            currentQuestion: {...currentQuestion, options: [...currentQuestion.options, currentOption]},\r\n            currentOption: { text: '' } \r\n        })\r\n    }\r\n\r\n    removeOption = (index) => {\r\n        const { currentQuestion } = this.state;\r\n        if (currentQuestion.selectedType === 4) return;\r\n        this.props.deleteOption(currentQuestion.options[index].id);\r\n        currentQuestion.options.splice(index, 1);\r\n        this.setState({ currentQuestion: {...currentQuestion, options: currentQuestion.options} });\r\n    }\r\n\r\n    updateQuestion = () => {\r\n        const { currentQuestion } = this.state;\r\n        this.props.updateQuestion(currentQuestion.name, currentQuestion.id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Modal trigger={\r\n                    <Button fluid>\r\n                        <Icon name='add square' />\r\n                        Update question\r\n                    </Button>\r\n                    }\r\n                closeIcon>\r\n                    <Header icon='archive' content='Update question' />\r\n                    <Modal.Content>\r\n                        <Input\r\n                            fluid\r\n                            label='Question name:'\r\n                            icon='question'\r\n                            type='text'\r\n                            value={this.state.currentQuestion.name}\r\n                            onChange={this.handleQuestionName}\r\n                        />\r\n                        <br/>\r\n\r\n                        {\r\n                            this.state.currentQuestion.selectedType !== 4\r\n                            ? \r\n                            <div>\r\n                                <Input\r\n                                    fluid\r\n                                    type='text'\r\n                                    value={this.state.currentOption.text}\r\n                                    onChange={this.handleOptionInput}\r\n                                />\r\n                                <Button fluid onClick={this.addOption}>Add option</Button>\r\n                            </div>\r\n                            :\r\n                            <div>Nema ponuđenog odgovora</div>\r\n                        }\r\n                        <div style={{marginTop: '10px'}}>\r\n                        {\r\n                            this.state.currentQuestion.options && this.state.currentQuestion.options.map((e, i) =>\r\n                            <div key={i} className='options'>\r\n                                {e.text ? e.text : e}\r\n                                <Button className='delete-button'\r\n                                    onClick={() => this.removeOption(i)}>\r\n                                    <Icon name='delete' />\r\n                                </Button>\r\n                            </div>\r\n                        )}\r\n                        </div>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button positive onClick={this.updateQuestion}>Update</Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Container, Segment, Button } from 'semantic-ui-react';\r\nimport { ModalUpdateQuestion } from '../../components/modalUpdateQuestion/ModalUpdateQuestion'\r\n\r\nexport class UpdateQuestionList extends Component {\r\n    render() {\r\n        const { questions } = this.props;\r\n        return (\r\n            <Container>\r\n                <Segment className='poll'>\r\n                    {questions.map( (q, i) =>\r\n                     <Segment key={q.id ? q.id : i} className='update'>\r\n                        <div className='title'>{q.text}</div>\r\n                        <Button\r\n                            negative\r\n                            onClick={() => this.props.deleteQuestion(q.id, q.opcije)}>\r\n                            Delete Question\r\n                        </Button>\r\n                        <div style={{float: 'right'}}>\r\n                            <ModalUpdateQuestion \r\n                                pollId={this.props.pollId}\r\n                                addOption={this.props.addOption}\r\n                                deleteOption={this.props.deleteOption}\r\n                                updateQuestion={this.props.updateQuestion}\r\n                                currentQuestion={{\r\n                                    id: q.id,\r\n                                    selectedType: q.tip,\r\n                                    name: q.text,\r\n                                    options: q.opcije\r\n                                }} \r\n                            />\r\n                        </div>\r\n                    </Segment>\r\n                    )}\r\n                </Segment>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Modal, Button, Header, Icon, Input } from 'semantic-ui-react';\r\n\r\nexport class ModalCreateQuestion extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            currentQuestion: {\r\n                name: '',\r\n                selectedType: 1,\r\n                options: [],\r\n            },\r\n            currentOption: {\r\n                text: ''\r\n            },\r\n        }\r\n    }\r\n\r\n    handleSelectedType = e => {\r\n        const { currentQuestion } = this.state;\r\n        this.setState({\r\n            currentQuestion: {\r\n                ...currentQuestion,\r\n                selectedType: e.target.value,\r\n                options: e.target.value == 4 ? ['Unesite svoj odgovor'] : []\r\n            }\r\n        });\r\n    };\r\n\r\n    handleQuestionName = e => {\r\n        const { currentQuestion } = this.state;\r\n        this.setState( {currentQuestion: {...currentQuestion, name: e.target.value} })\r\n    }\r\n\r\n    handleOptionInput = e => {\r\n        const { currentOption } = this.state;\r\n        this.setState( {currentOption: {text: e.target.value} })\r\n    }\r\n\r\n    addOption = () => {\r\n        const { currentOption, currentQuestion } = this.state;\r\n        if (currentOption.text == \"\") return;\r\n        this.setState({\r\n            currentQuestion: {...currentQuestion, options: [...currentQuestion.options, currentOption.text]},\r\n            currentOption: { text: '' } \r\n        })\r\n    }\r\n\r\n    addQuestion = () => {\r\n        const { currentQuestion, questions } = this.state;\r\n        const { update, pollId } = this.props;\r\n        if (currentQuestion.selectedType != 4 && currentQuestion.options.length < 2) return;\r\n\r\n        if (update && update == true) {\r\n            this.props.createQuestion(currentQuestion, pollId);\r\n            return;\r\n        }\r\n\r\n        this.props.createQuestion(currentQuestion);\r\n        this.setState({\r\n            currentQuestion: { name: '', selectedType: 1, options: [] },\r\n            currentOption: { text: '' }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Modal trigger={\r\n                    <Button fluid>\r\n                        <Icon name='add square' />\r\n                        Create new question\r\n                    </Button>\r\n                    }\r\n                closeIcon>\r\n                    <Header icon='archive' content='Create new question' />\r\n                    <Modal.Content>\r\n                        <Input\r\n                            fluid\r\n                            label='Question name:'\r\n                            icon='question'\r\n                            type='text'\r\n                            value={this.state.currentQuestion.name}\r\n                            onChange={this.handleQuestionName}\r\n                        />\r\n                        <select value={this.state.currentQuestion.selectedType} onChange={this.handleSelectedType}>\r\n                            <option value={1} >YES/NO</option>\r\n                            <option value={2}>SINGLE CHOICE</option>\r\n                            <option value={3}>MULTIPLE CHOICE</option>\r\n                            <option value={4}>TEXT</option>\r\n                        </select>\r\n                        <br/>\r\n\r\n                        {\r\n                            this.state.currentQuestion.selectedType != 4\r\n                            ? \r\n                            <div>\r\n                                <Input\r\n                                    fluid\r\n                                    type='text'\r\n                                    value={this.state.currentOption.text}\r\n                                    onChange={this.handleOptionInput}\r\n                                />\r\n                                <Button fluid onClick={this.addOption}>Add option</Button>\r\n                            </div>\r\n                            :\r\n                            <div>Nema ponuđenog odgovora</div>\r\n                        }\r\n                        <div style={{marginTop: '10px'}}>\r\n                        {\r\n                            this.state.currentQuestion.options.map((e, i) =>\r\n                            <div key={i} className='options'>{e}</div>\r\n                        )}\r\n                        </div>\r\n                    </Modal.Content>\r\n                    <Modal.Actions>\r\n                        <Button positive onClick={this.addQuestion}>ADD </Button>\r\n                    </Modal.Actions>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getUserAdmin } from '../../actions/LoginActions';\r\nimport { getAllQuestions, addOption, deleteOption, updateQuestion, deleteQuestion, addQuestion } from '../../actions/QuestionActions';\r\nimport { deletePoll } from '../../actions/PollActions';\r\nimport { UpdateQuestionList } from '../../components/updateQuestionList/UpdateQuestionList';\r\nimport { ModalCreateQuestion } from '../../components/modalCreateQuestion/ModalCreateQuestion';\r\nimport './UpdatePoll.css';\r\nimport { Button, Icon, Segment } from 'semantic-ui-react';\r\n\r\nclass UpdatePoll extends Component {\r\n\r\n    handleAnswers = () => {\r\n        const { answers } = this.props.answer;  \r\n        const { id } = this.props.match.params;\r\n        this.props.sendPollAnswers(answers, id);\r\n    }\r\n\r\n    deletePoll = () => {\r\n        this.props.deletePoll(this.props.match.params.id);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.getUserAdmin();\r\n        this.props.getAllQuestions(this.props.match.params.id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Segment className='update'>\r\n                    <div className='title'>Anketa</div>\r\n                    <Button\r\n                        onClick={this.deletePoll}\r\n                        className='add'>\r\n                        <Icon name='delete' />\r\n                        Delete poll\r\n                    </Button>\r\n                    <div style={{float: 'right'}}>\r\n                        <ModalCreateQuestion \r\n                            pollId={this.props.match.params.id}\r\n                            update={true} \r\n                            createQuestion={this.props.addQuestion} />\r\n                    </div>\r\n                </Segment>\r\n                {\r\n                    this.props.question.loading\r\n                    ?\r\n                    <h1>Loading---</h1>\r\n                    :\r\n                    <UpdateQuestionList \r\n                        pollId={this.props.match.params.id}\r\n                        addOption={this.props.addOption}\r\n                        deleteOption={this.props.deleteOption}\r\n                        updateQuestion={this.props.updateQuestion}\r\n                        deleteQuestion={this.props.deleteQuestion}\r\n                        questions={this.props.question.questions} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ question, user, polls }) => {\r\n    return { question, user, polls };\r\n};\r\nexport default connect(\r\n    mapStateToProps,\r\n    {getUserAdmin, getAllQuestions, addOption, deleteOption,\r\n    updateQuestion, deleteQuestion, deletePoll, addQuestion}\r\n    )(UpdatePoll);","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { getUserAdmin } from '../../actions/LoginActions';\r\nimport { getAllPolls } from '../../actions/PollActions';\r\nimport { PollList } from '../../components/pollList/PollList';\r\n// import './Home.css';\r\n\r\nclass Main extends Component {\r\n\r\n    componentDidMount(){\r\n        this.props.getUserAdmin();\r\n        this.props.getAllPolls();\r\n    }\r\n\r\n    render() {\r\n        if (!localStorage.getItem('token')){\r\n            return <Redirect to=\"/login\" />\r\n        }\r\n        return (\r\n            <div>\r\n                {\r\n                    this.props.polls.loading\r\n                    ?\r\n                    <h1>Loading---</h1>\r\n                    :\r\n                    <PollList link={\"/admin/update/\"} polls={this.props.polls.polls} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ user, polls }) => {\r\n    return { user, polls };\r\n};\r\nexport default connect(mapStateToProps, {getUserAdmin, getAllPolls})(Main);\r\n","import React, { Component } from 'react';\r\nimport { Container, Segment, Button } from 'semantic-ui-react';\r\n\r\nexport class CreatedQuestionsList extends Component {\r\n    render() {\r\n        const { createdQuestions } = this.props;\r\n        return (\r\n            <Container>\r\n                <Segment className='poll'>\r\n                    {createdQuestions.map( (q, i) =>\r\n                     <Segment key={i} className='update'>\r\n                        <div className='title'>{q.name}</div>\r\n                        <Button\r\n                            negative\r\n                            onClick={() => this.props.deleteCreatedQuestion(i)}>\r\n                            Delete Question\r\n                        </Button>\r\n                    </Segment>\r\n                    )}\r\n                </Segment>\r\n            </Container>\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { Button, Icon, Input, } from 'semantic-ui-react';\r\nimport { connect } from 'react-redux';\r\nimport { getUserAdmin } from '../../actions/LoginActions';\r\nimport { createQuestion, deleteCreatedQuestion, sendPoll } from '../../actions/CreatePollActions';\r\nimport { ModalCreateQuestion } from '../../components/modalCreateQuestion/ModalCreateQuestion';\r\nimport { CreatedQuestionsList } from '../../components/createdQuestionsList/CreatedQuestionsList';\r\n\r\nclass CreatePoll extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            pollName: \"\"\r\n        }\r\n    }\r\n\r\n    handlePollName = e => {\r\n        this.setState({ pollName: e.target.value })\r\n    }\r\n\r\n    sendPoll = () => {\r\n        const { pollName } = this.state;\r\n        if (pollName === \"\") return;\r\n        this.props.sendPoll(this.props.createPoll.createdQuestions, pollName);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.getUserAdmin();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Input fluid\r\n                    style={{marginBottom: '10px'}}\r\n                    type='text'\r\n                    label='Poll name:'\r\n                    placeholder='Add poll name...'\r\n                    value={this.state.pollName}\r\n                    onChange={this.handlePollName}\r\n                />\r\n                <ModalCreateQuestion createQuestion={this.props.createQuestion} />\r\n\r\n                <CreatedQuestionsList\r\n                    deleteCreatedQuestion={this.props.deleteCreatedQuestion}\r\n                    createdQuestions={this.props.createPoll.createdQuestions} />\r\n\r\n                <Button\r\n                    style={{position: 'fixed', bottom:'30px', left: '20px'}}\r\n                    positive onClick={this.sendPoll}><Icon name='add' /> \r\n                    Finish \r\n                </Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({ user, createPoll }) => {\r\n    return { user, createPoll };\r\n};\r\nexport default connect(mapStateToProps, {getUserAdmin, createQuestion, deleteCreatedQuestion, sendPoll})(CreatePoll);","import axios from 'axios';\r\nimport {\r\n    CREATE_QUESTION,\r\n    DELETE_CREATED_QUESTION,\r\n    SEND_POLL_STARTED,\r\n    SEND_POLL_FAILED,\r\n    SEND_POLL_SUCCESS,\r\n} from './ActionTypes';\r\nimport { Services } from '../services/Services';\r\n\r\nconst setQuestion = (payload) => {\r\n    return ({\r\n        type: CREATE_QUESTION,\r\n        payload\r\n    });\r\n};\r\n\r\nconst deleteQuestion = (payload) => {\r\n    return ({\r\n        type: DELETE_CREATED_QUESTION,\r\n        payload\r\n    });\r\n};\r\n\r\nexport const createQuestion = (question) => dispatch => {\r\n    dispatch(setQuestion(question));\r\n};\r\n\r\nexport const deleteCreatedQuestion = (index) => dispatch => {\r\n    dispatch(deleteQuestion(index));\r\n};\r\n\r\nconst sendPollsStarted = () => {\r\n    return ({\r\n        type: SEND_POLL_STARTED\r\n    });\r\n};\r\n\r\nconst sendPollsSuccess = () => {\r\n    return ({\r\n        type: SEND_POLL_SUCCESS,\r\n    });\r\n};\r\n\r\nconst sendPollsFailed = (error) => {\r\n    return ({\r\n        type: SEND_POLL_FAILED,\r\n        payload: error\r\n    });\r\n};\r\n\r\nexport const sendPoll = (questions, pollName) => dispatch => {\r\n    dispatch(sendPollsStarted());\r\n    axios.post(Services.sendPoll,  { questions, pollName })\r\n        .then(res => {\r\n            dispatch(sendPollsSuccess());\r\n            window.location.replace(\"/admin/main\");\r\n        })\r\n        .catch( () => dispatch(sendPollsFailed('Something went wrong!')));\r\n};","import React, { Component } from 'react';\r\nimport CmsRouter from './CmsRouter';\r\nimport Menu from '../components/menu/Menu';\r\n\r\nimport UpdatePoll from '../pages/updatePoll/UpdatePoll';\r\nimport Main from '../pages/main/Main';\r\nimport CreatePoll from '../pages/createPoll/CreatePoll';\r\nimport { Route } from 'react-router-dom';\r\n\r\nclass AdminRouter extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Menu role={\"admin\"} />\r\n                <Route path=\"/admin/main\" component={Main} />\r\n                <Route path=\"/admin/update/:id\" component={UpdatePoll} />\r\n                <Route path=\"/admin/create/\" component={CreatePoll} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AdminRouter;","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport UpdatePoll from '../pages/updatePoll/UpdatePoll';\r\nimport Main from '../pages/main/Main';\r\nimport CreatePoll from '../pages/createPoll/CreatePoll';\r\n\r\nclass CmsRouter extends Component {\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/admin/main\" component={Main} />\r\n                <Route path=\"/admin/update/:id\" component={UpdatePoll} />\r\n                <Route path=\"/admin/create/\" component={CreatePoll} />\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CmsRouter;","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Login from '../pages/login/Login';\r\nimport LoginAdmin from '../pages/loginAdmin/LoginAdmin';\r\nimport Register from '../pages/register/Register';\r\nimport UserRouter from './UserRouter';\r\nimport AdminRouter from './AdminRouter';\r\n\r\nimport Home from '../pages/home/Home';\r\nimport Poll from '../pages/poll/Poll';\r\nimport Success from '../pages/success/Success';\r\n\r\nclass LoginRouter extends Component {\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route path=\"/login\" component={Login} />\r\n                <Route path=\"/cms\" component={LoginAdmin} />\r\n                <Route path=\"/register\" component={Register} />\r\n\r\n                <Route exact path=\"/\" component={Home} />\r\n                <Route path=\"/poll/:id\" component={Poll} />\r\n                <Route path=\"/success\" component={Success} />\r\n\r\n                <Route path=\"/admin/\" component={AdminRouter} />\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LoginRouter;","import React, { Component } from 'react';\r\nimport LoginRouter from './LoginRouter';\r\n\r\nclass Router extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n            <LoginRouter />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Router;","import React, { Component } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport axios from 'axios';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport reducer from './reducers';\nimport ReduxThunk from 'redux-thunk';\nimport { composeWithDevTools} from 'redux-devtools-extension';\nimport './App.css';\nimport Router from './router/Router';\n\nconst store = createStore(reducer, {}, composeWithDevTools(applyMiddleware(ReduxThunk)));\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <BrowserRouter>\n                    <Router />\n                </BrowserRouter>\n            </Provider>\n        );\n    }\n}\n\n//axios.defaults.baseURL = 'http://localhost:5000/';\naxios.defaults.headers.common['Authorization'] = localStorage.getItem('token')?localStorage.getItem('token'): '';\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}